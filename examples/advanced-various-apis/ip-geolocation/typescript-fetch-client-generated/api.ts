/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * IP geolocation API
 * Abstract IP geolocation API allows developers to retrieve the region, country and city behind any IP worldwide. The API covers the geolocation of IPv4 and IPv6 addresses in 180+ countries worldwide. Extra information can be retrieved like the currency, flag or language associated to an IP.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://ipgeolocation.abstractapi.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    city?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    cityGeonameId?: number;
    /**
     * 
     * @type {InlineResponse200Connection}
     * @memberof InlineResponse200
     */
    connection?: InlineResponse200Connection;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    continent?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    continentCode?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    continentGeonameId?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    countryCode?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    countryGeonameId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200
     */
    countryIsEu?: boolean;
    /**
     * 
     * @type {InlineResponse200Currency}
     * @memberof InlineResponse200
     */
    currency?: InlineResponse200Currency;
    /**
     * 
     * @type {InlineResponse200Flag}
     * @memberof InlineResponse200
     */
    flag?: InlineResponse200Flag;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    ipAddress?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    longitude?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    region?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    regionGeonameId?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    regionIsoCode?: string;
    /**
     * 
     * @type {InlineResponse200Security}
     * @memberof InlineResponse200
     */
    security?: InlineResponse200Security;
    /**
     * 
     * @type {InlineResponse200Timezone}
     * @memberof InlineResponse200
     */
    timezone?: InlineResponse200Timezone;
}
/**
 * 
 * @export
 * @interface InlineResponse200Connection
 */
export interface InlineResponse200Connection {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200Connection
     */
    autonomousSystemNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Connection
     */
    autonomousSystemOrganization?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Connection
     */
    connectionType?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Connection
     */
    ispName?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Connection
     */
    organizationName?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200Currency
 */
export interface InlineResponse200Currency {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Currency
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Currency
     */
    currencyName?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200Flag
 */
export interface InlineResponse200Flag {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Flag
     */
    emoji?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Flag
     */
    png?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Flag
     */
    svg?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Flag
     */
    unicode?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse200Security
 */
export interface InlineResponse200Security {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200Security
     */
    isVpn?: boolean;
}
/**
 * 
 * @export
 * @interface InlineResponse200Timezone
 */
export interface InlineResponse200Timezone {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Timezone
     */
    abbreviation?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Timezone
     */
    currentTime?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200Timezone
     */
    gmtOffset?: number;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse200Timezone
     */
    isDst?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Timezone
     */
    name?: string;
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the location of an IP address
         * @param {string} apiKey 
         * @param {string} [ipAddress] 
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1Get(apiKey: string, ipAddress?: string, fields?: string, options: any = {}): FetchArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling v1Get.');
            }
            const localVarPath = `/v1/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (ipAddress !== undefined) {
                localVarQueryParameter['ip_address'] = ipAddress;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieve the location of an IP address
         * @param {string} apiKey 
         * @param {string} [ipAddress] 
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1Get(apiKey: string, ipAddress?: string, fields?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<InlineResponse200> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).v1Get(apiKey, ipAddress, fields, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Retrieve the location of an IP address
         * @param {string} apiKey 
         * @param {string} [ipAddress] 
         * @param {string} [fields] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1Get(apiKey: string, ipAddress?: string, fields?: string, options?: any) {
            return DefaultApiFp(configuration).v1Get(apiKey, ipAddress, fields, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Retrieve the location of an IP address
     * @param {string} apiKey 
     * @param {string} [ipAddress] 
     * @param {string} [fields] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public v1Get(apiKey: string, ipAddress?: string, fields?: string, options?: any) {
        return DefaultApiFp(this.configuration).v1Get(apiKey, ipAddress, fields, options)(this.fetch, this.basePath);
    }

}
